<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>exe</OutputType>
    <TargetFramework Condition="'$(TargetFramework)' == ''">$(MinTargetFramework)</TargetFramework>
    <PlatformTarget Condition="'$(PlatformTarget)' == ''">x86</PlatformTarget>
    <ApplicationIcon>..\Artwork\Snoop.ico</ApplicationIcon>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>

    <RollForward>Major</RollForward> <!-- can be removed as soon as we build with net6.0 -->
    
    <ApplicationIcon>..\Artwork\Snoop.ico</ApplicationIcon>
    <ApplicationManifest>../Shared/app.manifest</ApplicationManifest>
  </PropertyGroup>

  <PropertyGroup>
    <RootBuild Condition="'$(RootBuild)' == ''">True</RootBuild>
    <AssemblyName>$(AssemblyName).$(PlatformTarget)</AssemblyName>
    <TargetName>$(AssemblyName)</TargetName>
  </PropertyGroup>

  <PropertyGroup>
    <DefaultItemExcludes>$(DefaultItemExcludes);obj/**/*</DefaultItemExcludes>
  </PropertyGroup>
  
  <ItemGroup>
    <ApplicationManifest Include="../Shared/app.manifest" />

    <Compile Include="..\Shared\InjectorData.cs" Link="InjectorData.cs" />
    <Compile Include="..\Snoop.Core\Data\TransientSettingsData.cs" Link="Data\TransientSettingsData.cs" />
    <Compile Include="..\Snoop.Core\EnvironmentEx.cs">
      <Link>EnvironmentEx.cs</Link>
    </Compile>
    <Compile Include="..\Snoop.Core\Infrastructure\NativeMethods.cs" Link="NativeMethods.cs" />
    <Compile Include="..\Snoop.Core\SettingsHelper.cs">
      <Link>SettingsHelper.cs</Link>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="CommandLineParser" />
  </ItemGroup>
   
  <Target Name="CompileOtherArches" AfterTargets="Build" Condition="'$(RootBuild)' == 'True'">
    <!--
    Need to force re-evaluate after Restore, such that obj\x64\Snoop.InjectorLauncher.csproj.nuget.g.targets gets imported after it's created by Restore.
    If we reuse the previous evaluation used by Restore, it won't be imported there as it didn't exist yet.
    Setting a dummy property forces a new evaluation as it can't reuse the previous eval with a different set of properties.
    -->
    <Message Text="Building injector launcher for x64..." Importance="High" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Restore" Properties="RootBuild=False;Configuration=$(Configuration);PlatformTarget=x64" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Build" Properties="RootBuild=False;Configuration=$(Configuration);PlatformTarget=x64;DummyPropertyToForceReevaluateAfterRestore=true" />

    <Message Text="Building injector launcher for ARM..." Importance="High" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Restore" Properties="RootBuild=False;Configuration=$(Configuration);PlatformTarget=ARM;TargetFramework=net5.0-windows" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Build" Properties="RootBuild=False;Configuration=$(Configuration);PlatformTarget=ARM;TargetFramework=net5.0-windows;DummyPropertyToForceReevaluateAfterRestore=true" />

    <Message Text="Building injector launcher for ARM64..." Importance="High" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Restore" Properties="RootBuild=False;Configuration=$(Configuration);PlatformTarget=ARM64;TargetFramework=net5.0-windows" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Build" Properties="RootBuild=False;Configuration=$(Configuration);PlatformTarget=ARM64;TargetFramework=net5.0-windows;DummyPropertyToForceReevaluateAfterRestore=true" />
  </Target>
</Project>